#!/var/ossec/framework/python/bin/python3
# Copyright (C) 2015, Wazuh Inc.
# February 24, 2023.
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License (version 2) as published by the FSF - Free Software
# Foundation.
# Wazuh, Inc <support@wazuh.com>

import json
import sys
import time
import os
from socket import socket, AF_UNIX, SOCK_DGRAM
try:
    import requests
    import logging
except Exception as e:
    print("No module 'requests' found. Install: pip install requests")
    sys.exit(1)

# ossec.conf configuration:
#  <integration>
#      <name>custom-malwareBazaar</name>
#      <group>syscheck</group>
#      <alert_format>json</alert_format>
#  </integration>

# Global vars

DEBUG = False
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
json_alert = {}

# Set paths
log_file = '{0}/logs/integrations.log'.format(pwd)
socket_addr = '{0}/queue/sockets/queue'.format(pwd)

# Enables logging and configure it
def set_logger(name, logfile=None):
    hostname = os.uname()[1]
    format = '%(asctime)s {0} {1}: [%(levelname)s] %(message)s'.format(hostname, name)
    formatter = logging.Formatter(format)
    if DEBUG:
        logging.getLogger('').setLevel(logging.DEBUG)
    else:
        logging.getLogger('').setLevel(logging.INFO)

    streamHandler = logging.StreamHandler(sys.stdout)
    streamHandler.setFormatter(formatter)
    logging.getLogger('').addHandler(streamHandler)
    
    if logfile:
        fileHandler = logging.FileHandler(logfile)
        fileHandler.setFormatter(formatter)
        logging.getLogger('').addHandler(fileHandler)

def query_api(hash):
    data = {'query': 'get_info', 'hash': hash}
    url = "https://mb-api.abuse.ch/api/v1/"
    response = requests.post(url, data=data)

    if response.status_code == 200:
        json_response = response.json()
        data = json_response
    else:
        data = '{"query_status": "Error: [{}] {}"}'.format(response.status_code, response.text)
    
    return data

def collect(data):
    positives = len(data['vendor_intel'])
    del data["file_information"]
    del data["ole_information"]
    del data["yara_rules"]
    del data["vendor_intel"]
    return positives, data

def request_hash_info(alert):
    alert_output = { "malwareBazaar": {}, "integration": "malwareBazaar" }

    # If there is no a md5 checksum present in the alert. Exit.
    if not "md5_after" in alert["syscheck"]:
      return(0)
    # Request info using VirusTotal API
    data = query_api(alert["syscheck"]["md5_after"])
    # Create alert
    if data["query_status"] == "ok":
        positives, new_data = collect(data["data"][0])
        alert_output["malwareBazaar"] = new_data
        alert_output["malwareBazaar"]["vendorPositives"] = positives
        alert_output["malwareBazaar"]["result"] = data["query_status"]
    else:
        alert_output["malwareBazaar"]["result"] = data["query_status"]
    
    alert_output["malwareBazaar"]["source"] = {}
    alert_output["malwareBazaar"]["source"]["alert_id"] = alert["id"]
    alert_output["malwareBazaar"]["source"]["file"] = alert["syscheck"]["path"]
    alert_output["malwareBazaar"]["source"]["md5"] = alert["syscheck"]["md5_after"]
    alert_output["malwareBazaar"]["source"]["sha1"] = alert["syscheck"]["sha1_after"]
    
    return alert_output

def send_event(msg, agent = None):
    if not agent or agent["id"] == "000":
        string = '1:malwareBazaar:{0}'.format(json.dumps(msg))
    else:
        string = '1:[{0}] ({1}) {2}->malwareBazaar:{3}'.format(agent["id"], agent["name"], agent["ip"] if "ip" in agent else "any", json.dumps(msg))

    logging.debug(string)
    sock = socket(AF_UNIX, SOCK_DGRAM)
    sock.connect(socket_addr)
    sock.send(string.encode())
    sock.close()

if __name__ == "__main__":
    set_logger("malwareBazaar", log_file)
    logging.info("# Starting")

    try:
        alert_file_location = sys.argv[1]
        logging.debug("Reading Alert file: {}".format(alert_file_location))
        with open(alert_file_location) as alert_file:
            json_alert = json.load(alert_file)
        logging.debug("Processing alert: {}".format(json_alert))

        # Request VirusTotal info
        msg = request_hash_info(json_alert)
        logging.info("Request to malwareBazaar sent correctly")
        logging.debug("Alert to be sent: {}".format(msg))
        # If positive match, send event to Wazuh Manager
        if msg:
            send_event(msg, json_alert["agent"])
        logging.info("Alert sent to Wazuh")
    except Exception as e:
        logging.error(str(e))